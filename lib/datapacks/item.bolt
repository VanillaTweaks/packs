from dataclasses import dataclass

from lib.resource_location import ResourceLocation
from lib.types import Unknown

from nbtlib import Compound

from lib:datapacks/give_loot_table import give_loot_table
from lib:base_locations import vt


@dataclass
class Item:
    """An abstraction for a custom NBT item."""

    base_location: ResourceLocation
    # The non-namespaced name of the item.
    name: str
    # The ID of the actual item this is based on.
    real_item: str
    nbt: dict[str, Unknown]

    def __post_init__(self):
        # The namespaced ID of the custom item.
        #
        # Example: `ResourceLocation("rotation_wrench:wrench")`
        self.resource_location = self.base_location / self.name

        nbt_data = self.nbt.get("data", {})
        nbt_data_vanillatweaks = nbt_data.get("vanillatweaks", {})

        # TODO: Remove `.snbt()` and all constructors.
        snbt = Compound(
            {
                **self.nbt,
                "data": Compound({
                    **nbt_data,
                    "vanillatweaks": Compound({
                        **nbt_data_vanillatweaks,
                        "item": String(str(self.resource_location))
                    })
                })
            }
        ).snbt()

        item_loot_table = self.base_location / "items" / self.name
        loot_table item_loot_table {
            "type": "minecraft:command",
            "pools": [
                {
                    "rolls": 1,
                    "entries": [
                        {
                            "type": "minecraft:item",
                            "name": self.real_item,
                            "functions": [
                                {
                                    "function": "minecraft:set_nbt",
                                    "tag": snbt
                                }
                            ]
                        }
                    ]
                }
            ]
        }

        self.give = self.base_location / "give" / self.name
        function self.give:
            give_loot_table(item_loot_table)

    def __str__(self):
        return str(self.resource_location)
