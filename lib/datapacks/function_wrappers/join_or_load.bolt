from functools import cache

from lib:base_locations import vt
from lib:datapacks/function_wrappers/load import load
from lib:datapacks/function_wrappers/clock import clock
# TODO: Remove import aliases.
import lib:datapacks/scoreboard/objectives as objectives

vt_join_or_load = vt / "join_or_load"

counter = vt_join_or_load.counter
objectives.add(vt_join_or_load, counter)

join_or_load_tag = vt / "_join_or_load"

append function load(vt_join_or_load):
    # Reset all counters (including the global counter) to ensure all players are
    #  detected as out of sync the next time they're online.
    scoreboard players reset * counter

append function clock("1t", vt_join_or_load):
    execute as @a
        # Check if the player's counter is not in sync with the global counter.
        unless score @s counter = $global counter
        # The player's counter is not in sync, so we know they joined the world or the
        #  world loaded.
        run function f"#{join_or_load_tag}"

    # Increment the global counter, and sync all players' counters with it.
    execute store result score @a counter
        run scoreboard players add $global counter 1

    # The reason we use counters instead of the `minecraft.custom:minecraft.leave_game`
    #  criterion is because that criterion doesn't always detect leaving due to a crash.


@cache
def join_or_load(base_location):
    # Runs something as any player who joins the world and as `@a` on load.
    #
    # ⚠️ To avoid creating an unnecessary function, use
    #  `append function_tag join_or_load_tag` instead if the resource location's
    #  `join_or_load` function would otherwise only have one `function` command.
    #
    # >>> append function join_or_load(pack):
    # >>>     # This runs as any player who joins the world and as `@a` on load.

    join_or_load_function = base_location / "_join_or_load"

    append function_tag join_or_load_tag {"values": [join_or_load_function]}

    return join_or_load_function
