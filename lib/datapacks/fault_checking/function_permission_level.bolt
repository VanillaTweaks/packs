# Warns the server when the `function-permission-level` is too low.
# TODO: Run this if any function exists.

from lib:base_locations import vt
from lib:datapacks/fault_checking/vt_not_uninstalled import vt_not_uninstalled
from lib:datapacks/function_wrappers/join_or_load import join_or_load

function_permission_level = vt / "function_permission_level"

root_advancement = function_permission_level / "root"
advancement root_advancement {
    "criteria": {
        "impossible": {
            "trigger": "minecraft:impossible"
        }
    }
}

revoke_too_low_advancement = function_permission_level / "_revoke_too_low_advancement"
function revoke_too_low_advancement:
    # Revoke immediately so that no player can ever have the `too_low_advancement` for a
    #  full tick as long as the `function-permission-level` isn't too low.
    advancement revoke @s only too_low_advancement

# An advancement granted to all players and immediately revoked every tick, unless the
#  `function-permission-level` is too low, in which case it cannot be revoked.
too_low_advancement = function_permission_level / "too_low"
advancement too_low_advancement {
    # TODO: Remove `str`.
    "parent": str(root_advancement),
    "criteria": {
        "tick": {
            "trigger": "minecraft:tick",
            "conditions": {
                "player": [vt_not_uninstalled]
            }
        }
    },
    "rewards": {
        # TODO: Remove `str`.
        "function": str(revoke_too_low_advancement)
    }
}

warn = function_permission_level / "_warn"
function warn:
    # This must only use commands that don't require any permissions, such as `/me`.
    # Additionally, since `max_command_chain_length.fix` doesn't work when the
    #  `function-permission-level` is too low, this function must only have one command.

    me §7- §cError: The server's function permission level is set too low. It must be at least 2 for most data packs to work. An admin must open the server's §6server.properties§c file in any text editor, find §6function-permission-level§c, and set it equal to §62§c, which is the default. Then save/upload the edited file and restart the server.

# TODO: Move the contents of this variable to the resource definition directly.
warn_advancement_json = {
    # TODO: Remove `str`.
    "parent": str(root_advancement),
    "criteria": {
        "has_too_low_advancement": {
            "trigger": "minecraft:tick",
            "conditions": {
                "player": [
                    vt_not_uninstalled,
                    {
                        "condition": "minecraft:entity_properties",
                        "entity": "this",
                        "predicate": {
                            "player": {
                                "advancements": {
                                    # TODO: Remove `str`.
                                    str(too_low_advancement): true
                                }
                            }
                        }
                    }
                ]
            }
        }
    },
    "rewards": {
        # TODO: Remove `str`.
        "function": str(warn)
    }
}

# An advancement which is only granted when the `function-permission-level` is too low.
advancement (function_permission_level / "warn") warn_advancement_json

# If not for this, a player could keep these advancements forever if they were granted
#  them while the `function-permission-level` was too low, which would prevent the
#  advancement from ever triggering for that player again.
append function join_or_load(function_permission_level):
    advancement revoke @s from root_advancement
