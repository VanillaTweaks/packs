from functools import cache

from lib.resource_location import ResourceLocation


@cache
def add_temp_objective():
    from lib:datapacks/lantern_load import lantern_load

    vt_temp_objective = vt / "temp_objective"

    load_temp_objective = vt_temp_objective / "_load"
    function load_temp_objective:
        # Adding the temp objective must be the first command in the function so it
        #  still runs when the `maxCommandChainLength` is 1.
        scoreboard objectives add temp dummy

        # Reset all temp scores just to periodically clean the scoreboard a bit.
        scoreboard players reset * temp

    # Prepend instead of append to the `pre_load` tag so that other functions in the
    #  `pre_load` tag can use the temp objective.
    # TODO: Remove `str`.
    prepend function_tag (lantern_load / "pre_load") {"values": [str(load_temp_objective)]}

    uninstall_temp_objective = vt_temp_objective / "_uninstall"
    function uninstall_temp_objective:
        scoreboard objectives remove temp

    # Append instead of prepend to the uninstall tag so other functions in the uninstall
    #  tag can use the temp objective.
    # TODO: Remove `str`.
    append function_tag (vt / "_uninstall") {"values": [str(uninstall_temp_objective)]}


class VTResourceLocation(ResourceLocation):
    @property
    def temp(self):
        # An objective only for temporary scores that can safely be reset anytime.

        add_temp_objective()

        return super().temp


vt = VTResourceLocation("vanillatweaks", title="Vanilla Tweaks")

pack = ResourceLocation(
    ctx.project_id,
    version=ctx.project_version,
    title=ctx.project_name
)
